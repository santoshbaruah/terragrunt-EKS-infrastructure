name: Terragrunt CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev, staging, prod)'
        required: true
        default: 'dev'
      action:
        description: 'Action to perform (plan, apply, destroy)'
        required: true
        default: 'plan'

env:
  TF_VERSION: '1.7.5'
  TG_VERSION: '0.55.0'
  AWS_REGION: 'us-west-2'

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TG_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          # Verify installation
          terragrunt --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS credentials
        run: |
          echo "Verifying AWS credentials..."
          aws sts get-caller-identity || {
            echo "::error::AWS credentials verification failed. Please check that AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY secrets are correctly set in your GitHub repository."
            echo "::error::You can set these secrets by going to Settings > Secrets and variables > Actions in your GitHub repository."
            exit 1
          }

      - name: Terragrunt Format Check
        run: |
          terragrunt hclfmt --check

      - name: Terragrunt Validate
        run: |
          # Set TF_IN_AUTOMATION to suppress Terraform version warnings
          export TF_IN_AUTOMATION=true
          # Run validation on each directory containing .hcl files
          find environments -type d -name "*.terraform" -prune -o -type f -name "*.hcl" -exec dirname {} \; | sort -u | xargs -I{} sh -c 'cd {} && terragrunt validate || exit 1'

  plan:
    name: Plan
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TG_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS credentials
        run: |
          echo "Verifying AWS credentials..."
          aws sts get-caller-identity || {
            echo "::error::AWS credentials verification failed. Please check that AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY secrets are correctly set in your GitHub repository."
            echo "::error::You can set these secrets by going to Settings > Secrets and variables > Actions in your GitHub repository."
            exit 1
          }

      - name: Terragrunt Plan
        run: |
          # Set TF_IN_AUTOMATION to suppress Terraform version warnings
          export TF_IN_AUTOMATION=true
          cd environments/${{ matrix.environment }}
          terragrunt run-all plan --terragrunt-non-interactive

  apply:
    name: Apply
    needs: plan
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TG_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS credentials
        run: |
          echo "Verifying AWS credentials..."
          aws sts get-caller-identity || {
            echo "::error::AWS credentials verification failed. Please check that AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY secrets are correctly set in your GitHub repository."
            echo "::error::You can set these secrets by going to Settings > Secrets and variables > Actions in your GitHub repository."
            exit 1
          }

      - name: Terragrunt Apply
        run: |
          # Set TF_IN_AUTOMATION to suppress Terraform version warnings
          export TF_IN_AUTOMATION=true
          cd environments/${{ github.event.inputs.environment }}
          terragrunt run-all apply --terragrunt-non-interactive

  destroy:
    name: Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TG_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS credentials
        run: |
          echo "Verifying AWS credentials..."
          aws sts get-caller-identity || {
            echo "::error::AWS credentials verification failed. Please check that AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY secrets are correctly set in your GitHub repository."
            echo "::error::You can set these secrets by going to Settings > Secrets and variables > Actions in your GitHub repository."
            exit 1
          }

      - name: Terragrunt Destroy
        run: |
          # Set TF_IN_AUTOMATION to suppress Terraform version warnings
          export TF_IN_AUTOMATION=true
          cd environments/${{ github.event.inputs.environment }}
          terragrunt run-all destroy --terragrunt-non-interactive
